{"version":3,"sources":["logo.svg","components/Form.js","components/InGame.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Form","enter","console","log","player","document","getElementById","value","props","addPlayer","players","createPlayer","body","name","getInputValue","room","Axios","post","then","response","catch","error","inputName","getElementsByClassName","className","type","placeholder","id","onClick","this","host","to","React","Component","Game","App","state","setState","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"8JAAAA,EAAOC,QAAU,IAA0B,kC,8LCKtBC,E,4MACjBC,MAAQ,WACJC,QAAQC,IAAI,SACZ,IAAMC,EAASC,SAASC,eAAe,QAAQC,MAC/C,EAAKC,MAAMC,UAAUL,GACrBF,QAAQC,IAAI,EAAKK,MAAME,U,EAE3BC,aAAe,WACXT,QAAQC,IAAI,iBACZ,IAIIS,EAAO,CACPC,KALS,EAAKC,cAAc,QAM5BC,KALS,EAAKD,cAAc,SAOhCE,IAAMC,KACF,SACCL,GAEJM,MAAK,SAACC,GACHjB,QAAQC,IAAIgB,MAEfC,OAAM,SAACC,GACJnB,QAAQC,IAAIkB,O,EAGpBP,cAAgB,SAACQ,GAEb,OADejB,SAASkB,uBAAuBD,GAAWf,O,qDAI1DL,QAAQC,IAAI,U,+BAGZ,OAAQ,6BACJ,yBAAKqB,UAAY,QACjB,2BAAOC,KAAO,OAAOD,UAAY,OAAOE,YAAc,OAAOC,GAAK,SAClE,2BAAOH,UAAY,OAAOE,YAAc,OAAOC,GAAK,SACpD,4BAAQC,QAAWC,KAAKlB,gBAAxB,gBACA,4BAAQiB,QAAWC,KAAKC,MAAxB,SAEA,yBAAKN,UAAY,YACjB,2BAAIK,KAAKrB,MAAME,UAEf,yBAAKc,UAAY,QACjB,kBAAC,IAAD,CAAMI,QAAWC,KAAKlB,eAAgBa,UAAY,aAAaO,GAAG,UAAlE,e,GA/CsBC,IAAMC,WCFnBC,E,uKAGb,OACA,yBAAKV,UAAY,aACb,oCAAUK,KAAKrB,MAAME,SACrB,8D,GANsBsB,IAAMC,W,OC8BzBE,E,4MAxBbC,MAAO,CACL1B,QAAU,GAAIG,KAAO,K,EAGvBJ,UAAY,SAACL,GAEX,EAAKiC,SAAS,CAAC3B,QAAQ,GAAD,mBAAK,EAAK0B,MAAM1B,SAAhB,CAAwBN,O,uDAGtC,IAAD,OACP,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOkC,OAAK,EAACC,KAAO,IAAIC,OAAU,SAAChC,GAAD,OAChC,kBAAC,EAAD,iBAAUA,EAAV,CAAiBC,UAAa,EAAKA,UAAWC,QAAU,EAAK0B,MAAM1B,cAErE,kBAAC,IAAD,CAAO4B,OAAK,EAACC,KAAO,SAASC,OAAU,SAAChC,GAAD,OACrC,kBAAC,EAAD,iBAAUA,EAAV,CAAiBE,QAAU,EAAK0B,MAAM1B,mB,GAlB9BsB,IAAMC,WCKJQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASN,OACP,kBAAC,IAAMO,WAAP,KACE,kBAAC,EAAD,OAEF1C,SAASC,eAAe,SDyHpB,kBAAmB0C,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdhC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMgC,c","file":"static/js/main.fe0055ca.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport '../style/form.css'\r\nimport Axios from 'axios'\r\n\r\nexport default class Form extends React.Component{\r\n    enter = () => {\r\n        console.log(\"enter\")\r\n        const player = document.getElementById(\"name\").value; \r\n        this.props.addPlayer(player)\r\n        console.log(this.props.players)\r\n    }\r\n    createPlayer = () => {\r\n        console.log('create player')\r\n        const name = this.getInputValue(\"name\")\r\n        const room = this.getInputValue(\"room\")\r\n\r\n        //const room = document.getElementById(\"room\").value;\r\n        let body = {\r\n            name: name,\r\n            room: room\r\n        }\r\n        Axios.post(\r\n            '/users',\r\n            (body)\r\n        )\r\n        .then((response) => {\r\n            console.log(response)\r\n        })\r\n        .catch((error) => {\r\n            console.log(error)\r\n        })\r\n    }\r\n    getInputValue = (inputName) =>{\r\n        var inputVal = document.getElementsByClassName(inputName).value;\r\n        return inputVal\r\n    }\r\n    host() {\r\n        console.log(\"host\")\r\n    }\r\n    render() {\r\n        return (<div>\r\n            <div className = \"form\">\r\n            <input type = \"text\" className = \"name\" placeholder = \"name\" id = \"name\"></input>\r\n            <input className = \"room\" placeholder = \"room\" id = \"room\"></input>\r\n            <button onClick = {this.createPlayer()}>Confirm Name</button>\r\n            <button onClick = {this.host}>Host</button>\r\n            </div>\r\n            <div className = \"nameSpot\">\r\n            <p>{this.props.players}</p>\r\n            </div>\r\n            <div className = \"link\">\r\n            <Link onClick = {this.createPlayer()} className = \"linkButton\" to=\"/enter\">Enter</Link>\r\n\r\n            </div>\r\n        </div>)\r\n      }\r\n}\r\n\r\n","import React from 'react';\r\nimport '../style/form.css'\r\n\r\nexport default class Game extends React.Component{\r\n\r\n    render() {\r\n        return(\r\n        <div className = \"container\">\r\n            <p>Hello {this.props.players}</p>\r\n            <p> Waiting for game to start</p>\r\n        </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Form from './components/Form'\nimport Game from './components/InGame'\nimport {BrowserRouter as Router, Route, Switch, Link, Redirect} from 'react-router-dom'\n\nclass App extends React.Component{\n\n  state= {\n    players : [], name : \"m\"\n  }\n\n  addPlayer = (player) =>{\n    \n    this.setState({players:[...this.state.players,player]}) \n    //console.log(this.state.players)\n  }\n  render() {\n    return (\n      <Router>\n        <Route exact path = \"/\" render = {(props) => (\n          <Form {...props} addPlayer = {this.addPlayer} players= {this.state.players} />\n        )}/>\n        <Route exact path = \"/enter\" render = {(props) => (\n          <Game {...props} players= {this.state.players} />\n        )}/>\n      </Router>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}